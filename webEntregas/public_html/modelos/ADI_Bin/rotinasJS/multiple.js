<!-- /ADI_Intranet_Root/ADI_Programacao/ADI_Bin/rotinasJS/multiple.js -->/** * Função para inserirItem * @version 1.0 01/01/2003 * @author Alexandre * @param campo Campo a ser inserido * @param descricao Descrição a ser inserido * @return codigo Código a ser inserido * @see verificaItem * @see quantosSelecionados * @see valorSelecionado * @see removeSelecionados * @see removeTodos */function insereItem( campo, descricao, codigo ){    with( campo )    {        options[ options.length ] = new Option( descricao, codigo );    }}/** * Função para remover todos os itens * @version 1.0 01/01/2003 * @author Alexandre * @param campo Campo a ser inserido * @see verificaItem * @see quantosSelecionados * @see valorSelecionado * @see removeSelecionados * @see insereItem */ function removeTodos( campo ){    with( campo )    {        for( var i =( options.length - 1 ); i > -1; i-- )        {            options[ i ] = null;        }    }}/** * Função para remover campos selecionados * @version 1.0 01/01/2003 * @author Alexandre * @param campo Campo a ser inserido * @see verificaItem * @see quantosSelecionados * @see valorSelecionado * @see removeTodos * @see insereItem */function removeSelecionados( campo ){    with( campo )    {        for( var i =( options.length - 1 ); i > -1; i-- )        {            if( options[ i ].selected )            {                options[ i ] = null;            }        }    }}/** * Função para selecionar o valor * @version 1.0 01/01/2003 * @author Alexandre * @param campo Campo a ser selecionado * @return Retorna campo selecionado * @see verificaItem * @see quantosSelecionados * @see removeSelecionados * @see removeTodos * @see insereItem */ function valorSelecionado( campo ){    return campo.options[ campo.selectedIndex ].value;}/** * Função contadora de itens selecionados * @version 1.0 01/01/2003 * @author Alexandre * @param campo Campo a ser selecionado * @return Retorna quantidade selecionados * @see verificaItem * @see valorSelecionado * @see removeSelecionados * @see removeTodos * @see insereItem */ function quantosSelecionados( campo ){    var numeroSelecionados = 0;    with( campo )    {        for( var i = 0; i < options.length; i++ )        {            if( options[ i ].selected )            {                ++numeroSelecionados;            }        }    }    return numeroSelecionados;}/** * Função que verifica a existencia do campo * @version 1.0 01/01/2003 * @author Alexandre * @param campo Campo a ser selecionado * @param codigo Código do campo a ser selecionado * @return Retorna true ou false caso exista ou não o item * @see quantosSelecionados * @see valorSelecionado * @see removeSelecionados * @see removeTodos * @see insereItem */function verificaItem( campo, codigo ){    with( campo )    {        for( var i = 0; i < options.length; i++ )        {            if( options[ i ].value == codigo )            {                alert( GENBA0024 );                return true;            }        }    }    return false;}/** * Função que seleciona o item no combo * @version 1.0 23/07/2004 * @author Alan Nunes Voiski * @param campo  Campo a ser selecionado * @param codigo Código do campo para seleção ( podendo ser um vetor com varias chaves ) * @param pos    Posição no Vetor( não obrigatorio ) ( podendo ser um vetor com varias posicoes. ) *               Caso as posicoes sejam em sequencia, pode se passar apenas a primeira posicao,  *               e a função montará o vetor com resto das posições relativo a quantidade de chaves. * @return Retorna true ou false, caso selecione ou não o item */function selecionaItem( campo, codigo, pos ){    if( pos == null )        pos = 0;    //Caso parametro 'codigo' não seja um vetor, monta ele em forma de vetor    if( !( codigo instanceof Array ) )    {        var auxCodigo = codigo;        codigo = new Array( );        codigo[0] = auxCodigo;    }    //Caso parametro 'pos' não seja um vetor, monta ele em forma de vetor    if( !( pos instanceof Array ) )    {        var auxPos = pos;        pos = new Array( );        pos[ 0 ] = auxPos;        //Caso 'codigo' seja um vetor com mais de uma posição, acrescenta 'pos'         //em sequencia para o mesmo número de elementos do vetor 'codigo'        for( var x = 1; x < codigo.length; x++ )            pos[ x ] = pos[ 0 ] + x;    }        with( campo )    {        //Pulando a primeira opcao, já que se nenhum for achado, ele ficará selecionado por ser o primeiro        //Isso evitara falha em combos que possuem opcoes com valor 0, que é o mesmo valor do primeiro        for( var i = 1; i < options.length; i++ )        {            var aux=eval( options[ i ].value );            if( !( aux instanceof Array ) )                aux = new Array( options[ i ].value );            var valCampoAchado = true;            //Processo Verificação das chaves com os valores do combo            for( var x = 0; x < codigo.length; x++ )                if( aux[ pos[ x ] ] != codigo[ x ] )                {                    valCampoAchado = false                    x = codigo.length;                }            //Caso seja achado o item de acordo com as chaves, seleciona ele e retorna verdadeiro            if( valCampoAchado )            {                options[ i ].selected = true;                return true;            }        }    }    //Caso não seja achado o item, retorna falso demonstrando sua falta no combo    return false;}/** * Função para preencherCombo * @version 1.0 16/02/2004 * @author Alan Nunes Voiski * @param campo  Campo tipo select a ser inserido * @param vetor  Vetor Com Dados A serem Inseridos * @param chaves Vetor ou variavel comum Parava validar Dados * @param tam    variavel inteira informando tamanho maximo do campo */function preencheCombo( campo, vetor, chaves, tam ){        //limpa vetor do campo de tipo select	removeTodos( campo );        //Inserem opção padrão	insereItem( campo, "-- Selecione um(a)", 0 );	//Variavel de Interação, default é 3, caso chave seja um vetor, tamanho dele + 2	var tamArray = 3;	if( chaves instanceof Array )            tamArray = chaves.length + 2;		//Rotina para Inserir Dados no combo	for( var x = 0; vetor.length > x; x += tamArray )        {		var valida=1;		//Validade Chaves		if( chaves instanceof Array )                    for( con = 0; chaves.length > con; valida *= ( vetor[ x + con ] == chaves[ con++ ] ) );		else                     valida = ( vetor[ x ] + '' == chaves + '' );				//Inserindo Item caso seja valido		if( valida )                {			var descrValidada = vetor[ x + tamArray - 1 ];			//Tamanho limite do campo, default e 40			if( tam == undefined )                            tam = 40;			//Quebrando o campo caso ultrapasse o limitando			if( descrValidada.length > tam )                            descrValidada = descrValidada.substring( 0, 40 );			//Inserindo			insereItem( campo, descrValidada, vetor[ x + tamArray - 2 ] );		}	}}/* Vetor com dados combos que serão modificados pelo montaComboAjax*/  var vetorAuxAjax=new Array( );/* Posição do Formulario utilizado para ajax*/  var formularioAjax=1;/* Ponteiro para função de retorno do montaCombo*/  var _MontaComboRetorno=null;/** * Função para Preenxer multiplos combos utilizando ajax para retorno de dados de um sql * @version 1.0 21/11/2005 * @author Alan Nunes Voiski * @param vetor  Vetor contendo dados para geração dos combos após *				 retorno do ajax, pode ser passado apenas uma string * 				 em caso simples de apenas UM combo a ser modificado *				 A String deve ser informada utilizando ^ como separação *				 	dos dados sendo estas as posições *				 1 posicao:nome do objeto combo a ser modificado *				 2 posicao:mascara da chave utilizando # envolvendo numeros *				 		   a serem substituidos *				 3 posicao:mascara da descrição utilizando # envolvendo numeros *				 		   a serem substituidos *				 4 posicao:( opcional-padrao=40 ) tamanho limite da descrição após *				 			formatada *				 5 posicao:( opcional ) 1 campo a ser exibido no combo com valor 0 *				 6 posicao:( opcional-padrão=0 ) formulário do combo a ser modificado *				 Ex: "cboSeqUnidade^#0#^#1#-#2#" * @param formulario  formulario que deverá ser submetido ao ajax( o padrão é 1 ) * @param funcao  função a ser chamada como retorno após preenchido o combo. Caso nada seja  *                passado, será chamado afterMontaCombo normalmente. * NOTA: deve se criar um formulario para ser submetido, com um componente hidden sql( x ) *       para cada dado do parametro vetor. *       deve se estanciar ajax.js para utilizar esta função */function montaComboAjax( vetor, formulario, funcao ){    //Limpando vetor vetorAuxAjax    vetorAuxAjax = new Array( );    if( !( vetor instanceof Array ) )    	vetor = eval( "new Array( \"" + vetor + "\" )" )    if( vetor.length == 0 )        return;    for( var x = 0; vetor.length > x / 10; x += 10 )    {                var vetorAux = eval( "new Array( '" + trocaString( vetor[ x / 10 ], "^", "','" ) + "' )" )        //Preenxendo vetor vetorAuxAjax        try        {            vetorAuxAjax[ x + 0 ] = vetorAux[ 0 ]; //campo            vetorAuxAjax[ x + 1 ] = vetorAux[ 1 ]; //chave            vetorAuxAjax[ x + 2 ] = vetorAux[ 2 ]; //descr            vetorAuxAjax[ x + 3 ] = ( vetorAux[ 3 ] == null ) ? "40" : vetorAux[ 3 ]; //tam limite            vetorAuxAjax[ x + 4 ] = ( vetorAux[ 4 ] == null ) ? "" : vetorAux[ 4 ]; //1° campo            vetorAuxAjax[ x + 5 ] = ( vetorAux[ 5 ] == null ) ? "0" : vetorAux[ 5 ]; //formulario        }        catch( ERROR )        {            alert( "Erro na passagem de Parâmetros;" )            return;        }    }    //Enviando formulario pelo Ajax    formularioAjax = ( formulario == null ) ? "1" : "" + formulario;    _MontaComboRetorno = funcao;    ajaxRequest( document.forms[ formularioAjax ], montaComboFinal, true );}/** * Função Auxiliar da montaComboAjax, onde será montado o combo * @version 1.0 21/11/2005 * @author Alan Nunes Voiski * Alterações: Criando um contador para controle de preenchimento do combo (Bruno - 09/10/2007)   ex:   function afterMontaCombo()   {        alert( posicaoQuantidadeRegistros[x] );    } */var posicaoQuantidadeRegistros = new Array();function montaComboFinal( ){    if( ajax_request.readyState == 4 )    {        if( ajax_request.status == 200 )        {                        //Variavel de preenchimento do maisArray            var maisCombo = "\'\'";            posicaoQuantidadeRegistros = new Array();                        //Preenxendo Combo-Inicio            for( var x = 0; vetorAuxAjax.length > x; x += 10 )            {                //Pegando Parametros                var vetorAjax = ajax_request.responseXML.getElementsByTagName( "sql" +( x / 10 + 1 ) );                var campo = eval( "document.forms[ " + vetorAuxAjax[ x + 5 ] + " ]." + vetorAuxAjax[ x ] );                                if( campo )                {                    removeTodos( campo );                    insereItem( campo, vetorAuxAjax[ x + 4 ].length > 0 ? vetorAuxAjax[ x + 4 ] : "-- Selecione um(a)", 0 );                    var contRegistros = 0;                    if(vetorAjax.length>0)                    for( var i = 0; i < vetorAjax[ 0 ].childNodes.length; i++ )                    {                                                var chave = vetorAuxAjax[ x + 1 ];                        var descr = vetorAuxAjax[ x + 2 ];                        var y = 0;                        for( var j = 0; j < vetorAjax[ 0 ].childNodes[ i ].childNodes.length; j++ )                        {                            if( vetorAjax[ 0 ].childNodes[ i ].childNodes[ j ].nodeName == "#text" )                                continue;                            var valor = vetorAjax[ 0 ].childNodes[ i ].childNodes[ j ].childNodes[ 0 ].nodeValue;                            chave = chave.replace( "#" + y + "#", "'" + trocaString( valor, "\n", "\\n" ) + "'" );                            descr = descr.replace( "#" + y + "#", trim( valor ) );                            contRegistros ++;                            y++;                        }                        if( chave == vetorAuxAjax[ x + 1 ] || descr == vetorAuxAjax[ x + 2 ] )                            continue;                         maisCombo += ",'"+descr+"'";                        if( descr.length > vetorAuxAjax[ x + 3 ] * 1 )                            descr = descr.substring( 0, vetorAuxAjax[ x + 3 ] * 1 );                        insereItem( campo, descr, "new Array(" + chave + ")" );                    }                    while( maisCombo.indexOf( "\n" ) >= 0 )                        maisCombo = maisCombo.replace( "\n", "" );                    posicaoQuantidadeRegistros[ posicaoQuantidadeRegistros.length ] = contRegistros;                    eval( "maisArray"+campo.name+" = new Array( "+maisCombo+" )" );                }            }                        //Fim            if( formularioAjax != 0 )                document.forms[ formularioAjax ].reset( );             if( _MontaComboRetorno == null )                afterMontaCombo( );             else                _MontaComboRetorno();        }    }}/** * Função para ser utilizada após a função montaComboAjax * @version 1.0 12/01/2005 * @author lucas hermano */function afterMontaCombo( ){}/** * Função trim para retirar caracteres vazios do final e do comeco de um string * @version 1.0 11/01/2006 * @author Marcos F. S. * @param String texto em q vai ser dado TRIM * @return String texto sem o espaco no comeco e no final */function trim( texto ){	var strAux = "";	for( var i = 0; i <= texto.length; i++  )	{		if ( texto.charAt( i ) != ' ' )		{			strAux = texto.substring( i, texto.length );			break;		}		}	texto = strAux;		for( var j = texto.length - 1; j >= 0; j-- )	{		if ( texto.charAt( j ) != ' ' )		{			strAux = texto.substring( 0, j + 1 );			break;		}	}		texto = strAux;		return texto;}/** * Função para substituir um substring dentro de um texto por outro. * @version 1.0 01/04/2000 * @author Alexandre * @param textoString String onde haverá a substituicao * @param stringDe Substring dentro do texto a ser substituido * @param stringPara Substring de suibstituição * @return String com substring substituída */function trocaString(textoString, stringDe, stringPara){    retorno = "";    posInicial = 0;    if (textoString == null)    {        return "";    }    if (stringPara == null)    {        stringPara = "";    }    while ((posInicial = textoString.indexOf(stringDe)) != -1)    {        retorno += textoString.substring(0, posInicial) + stringPara;        textoString    =   textoString.substring(posInicial + stringDe.length);    }    retorno += textoString;    return retorno;}/** * Função para selecionar as várias chaves de um combo-multiple preenchendo um  * campo hidden. * @version 1.0 17/10/2007 * @author Alan * @param campoOrigem objeto tipo select que será buscado as chaves * @param campoHidden objeto tipo hidden que será montado a seleção * @param pos inteiro com a posicao da chave, default = 0 */function selecionaComboMultiple( campoOrigem, campoHidden, pos ){    //Default pos = 0    if( pos == null )        pos=0;    //Auxiliares    var auxPos="";    var vetAux;    //Estrutura de busca    for( var i =( campoOrigem.options.length - 1 ); i > -1; i-- )        if( campoOrigem.options[ i ].selected )        {            vetAux = eval( campoOrigem.options[ i ].value );            if( vetAux instanceof Array )                auxPos += "," + vetAux[ pos ];            else                auxPos += "," + vetAux;        }    //Retorno    campoHidden.value = auxPos.substring( 1 );}